kind: BuildConfig
apiVersion: build.openshift.io/v1
metadata:
  name: petclinic-pipeline
spec:
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy:
      jenkinsfile: |
        pipeline {
          agent {
              label 'maven'
          }
          environment {
            devProjectIsNew  = "false"
            prodProjectIsNew = "false"
          }
          stages {
            stage('Build App') {
              steps {
                withCredentials([usernamePassword(credentialsId: env.GITSECRET, usernameVariable: 'username', passwordVariable: 'password')]) {
                  git branch: 'main', url: env.REPO, credentialsId: env.GITSECRET
                }
                sh "mvn install -DskipTests=true"
              }
            }
            stage('Test') {
              steps {
                sh "mvn test"
                step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
              }
            }           
            stage('Create Builder') {
              when {
                expression {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      return !openshift.selector("bc","petclinic").exists();
                    }
                  }
                }
              }
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      openshift.newBuild("--name=petclinic", "--image-stream=openshift/redhat-openjdk18-openshift:1.8", "--binary")
                    }
                  }
                }
              }
            }
            stage('Build Image') {
              steps {
                sh "cp target/*.jar target/petclinic.jar"
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      openshift.selector("bc", "petclinic").startBuild("--from-file=target/petclinic.jar", "--wait=true")
                    }
                  }
                }
              }
            }
            stage('Create DeploymentConfig for DEV') {
              when {
                expression {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      return !openshift.selector("deploymentconfig","petclinic").exists();
                    }
                  }
                }
              }
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      def app = openshift.newApp("petclinic:latest", "--as-deployment-config=true")
                      app.narrow("svc").expose();
          
                      def dc = openshift.selector("dc", "petclinic")
                      while (dc.object().spec.replicas != dc.object().status.readyReplicas) {
                        sleep 10
                      }
                      openshift.set("triggers", "dc/petclinic", "--manual")
                      devProjectIsNew = "true"
                    }
                  }
                }
              }
            }
            stage('Deploy DEV') {
              when {
                expression {
                  return devProjectIsNew
                }
              }
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      openshift.selector("deploymentconfig", "petclinic").rollout().latest();
                    }
                  }
                }
              }
            }
            stage('Promote to PROD') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.tag("${env.DEV_PROJECT}/petclinic:latest", "${env.PROD_PROJECT}/petclinic:prod")
                  }
                }
              }
            }
            stage('Create DeploymentConfig for PROD') {
              when {
                expression {
                  openshift.withCluster() {
                    openshift.withProject(env.PROD_PROJECT) {
                     return !openshift.selector("deploymentconfig","petclinic").exists();
                    }
                  }
                }
              }
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.PROD_PROJECT) {
                      def app = openshift.newApp("petclinic:prod", "--as-deployment-config=true")
                      app.narrow("svc").expose();
          
                      def dc = openshift.selector("dc", "petclinic")
                      while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                        sleep 10
                      }
                      openshift.set("triggers", "dc/petclinic", "--manual")

                      prodProjectIsNew = "true"
                    }
                  }
                }
              }
            }
            stage('Deploy PROD') {
              when {
                expression {
                  return prodProjectIsNew
                }
              }
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.PROD_PROJECT) {
                      openshift.selector("deploymentconfig", "petclinic").rollout().latest();
                    }
                  }
                }
              }
            }
          }
        }
      env:
        - name: DEV_PROJECT
          value: petclinic-jenkins-dev
        - name: PROD_PROJECT
          value: petclinic-jenkins-prod
        - name: REPO
          value: 'https://github.com/spring-projects/spring-petclinic.git'
        - name: GITSECRET
          value: jenkins-user-git-secret
  source:
    type: None
  runPolicy: Serial
